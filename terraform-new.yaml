# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
 branches:
   include:
    - master
  
pool:
  vmImage: 'ubuntu-latest'

stages: 
- stage: Terraform_Setup
  jobs:
    - job: Install_Terraform
      steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.13.2'
#Not needed as it is just for debugging
      - script: |
              ls $(System.DefaultWorkingDirectory)
              echo "Terraform build started.."
              cd $(System.DefaultWorkingDirectory)/platform
              echo "list all the files"
              ls 
        displayName: 'Verify_files'
      
- stage: Plan_Terraform
  dependsOn: [Terraform_Setup]
  jobs:
    - job: Plan_Terraform
      steps:
      - script: |
              echo "=====================List all the files of main folder============================"
              cd $(System.DefaultWorkingDirectory)/platform
              echo "list all the files"
              ls 
              #Need to Add them as variables in ADO and secret values in Azure keyvault
              export ARM_CLIENT_ID="290f6b48-7a20-4473-aea2-087b240ac884"
              export ARM_CLIENT_SECRET="BVL8Q~qPOsHHnaFLnLyHIw65mfQ5TT6UYO6sHbwB"
              export ARM_SUBSCRIPTION_ID="78b403c6-7d6d-4d7f-b32c-5635479016fb"
              export ARM_TENANT_ID="6594e148-8146-4b66-b2ea-704e1a0d83c0"
              terraform init
               
               echo ##############~~~~~~~~~~~~~~~Terraform Plan~~~~~~~~~~~~~~###############
              terraform plan -var-file="../env/dev/dev-env.tfvars" -out="out.plan"
        displayName: 'build stage'
    
      - task: CopyFiles@2
        inputs:
            SourceFolder: '$(System.DefaultWorkingDirectory)/'
            Contents: |
                      **
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
        displayName: 'Copy Artifacts'

      - publish: '$(Build.ArtifactStagingDirectory)'
        artifact: dev_artifacts

- stage: Apply_On_Parallo
  dependsOn: [Terraform_Setup, Plan_Terraform]
  jobs:
  - deployment: 
    displayName: DEV
    environment: DEV
    strategy:
     runOnce:
        deploy:
           steps:
            - download: current 
              artifact: dev_artifacts
            - script: |
                    echo "Deploy to Move to directory"
                      ls $(Pipeline.Workspace)/dev_artifacts/
                      echo "=====================List all the files of main folder============================"
                      cd $(Pipeline.Workspace)/dev_artifacts/platform
                      #Need to Add them as variables in ADO and secret values in Azure keyvault
                      export ARM_CLIENT_ID="290f6b48-7a20-4473-aea2-087b240ac884"
                      export ARM_CLIENT_SECRET="BVL8Q~qPOsHHnaFLnLyHIw65mfQ5TT6UYO6sHbwB"
                      export ARM_SUBSCRIPTION_ID="78b403c6-7d6d-4d7f-b32c-5635479016fb"
                      export ARM_TENANT_ID="6594e148-8146-4b66-b2ea-704e1a0d83c0"
                     terraform init
                     #Workaround as it is giving permission denied error
                     chmod +x .terraform/providers/registry.terraform.io/hashicorp/azurerm/3.18.0/linux_amd64/terraform-provider-azurerm_v3.18.0_x5
               
                     echo ##############~~~~~~~~~~~~~~~Terraform Plan~~~~~~~~~~~~~~###############
                     terraform plan -var-file="../env/dev/dev-env.tfvars" -out="out.plan"
        
                    echo '#######Terraform Apply########'

                    terraform apply out.plan
              displayName: Terraform Apply
